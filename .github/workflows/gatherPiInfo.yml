name: Gather PI Data

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * WED'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    
    env:
      WCL_CLIENT_ID:     ${{ secrets.WCLOGS_CLIENT_ID }}
      WCL_CLIENT_SECRET: ${{ secrets.WCLOGS_CLIENT_SECRET }}
      GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}
    
    outputs:
      matrix: ${{ steps.make-matrix.outputs.matrix }}
  
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python & dependencies
        uses: actions/setup-python@v4

      - run: pip install requests

      - name: Prepare sim-matrix JSON
        id: make-matrix
        run: |
            # this will write matrix.json + all your debug logs
            python backend_scripts/gather_pi_data_matrix.py --prepare

            # now load matrix.json into the GH Action output
            echo "matrix=$(jq -c . matrix.json)" >> $GITHUB_OUTPUT
      - name: Upload generated profiles
        uses: actions/upload-artifact@v4
        with:
            name: simc-profiles
            path: data/sims/profiles/
  
  build-simc:
    name: Build SimulationCraft CLI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ libssl-dev libpcap-dev libcurl4-openssl-dev

      - name: Clone SimulationCraft
        run: git clone --depth=1 https://github.com/simulationcraft/simc.git simc

      - name: Build SimulationCraft
        run: |
          mkdir simc/build && cd simc/build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_GUI=OFF
          make -j$(nproc)

      - name: Package simc binary for upload
        run: |
            # create a top-level folder so upload-artifact finds it
            mkdir -p $GITHUB_WORKSPACE/simc-dist
            cp simc/build/simc $GITHUB_WORKSPACE/simc-dist/

      - name: Upload simc binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: simc-binary
          path: simc-dist/
  simulate:
    needs: [build-simc, prepare-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
      - name: Download generated profiles
        uses: actions/download-artifact@v4
        with:
            name: simc-profiles
            path: data/sims/profiles
      - uses: actions/setup-python@v4
        with: { python-version: '3.12' }
      - run: pip install requests
      
      - name: Download simc binary
        uses: actions/download-artifact@v4
        with:
          name: simc-binary
          path: simc-dist
      - name: Download jq (for looping JSON arrays)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Make simc executable
        run: chmod +x simc-dist/simc
          
      - name: Add simc to PATH
        run: echo "${{ github.workspace }}/simc-dist" >> $GITHUB_PATH

      - name: Run all sims for one spec
        run: |
          # Grab the jobs list into a variable
          jobs_json='${{ toJson(matrix.jobs) }}'

          # Iterate each job object
          echo "$jobs_json" | jq -c '.[]' | while read -r job; do
            sim_file=$(printf '%s' "$job" | jq -r .sim_file)
            json_out=$(printf '%s' "$job" | jq -r .json_out)
            html_out=$(printf '%s' "$job" | jq -r .html_out)
            cls=$(printf '%s' "$job" | jq -r .class)
            spec=$(printf '%s' "$job" | jq -r .spec)
            targets=$(printf '%s' "$job" | jq -r .targets)
            pi=$(printf '%s' "$job" | jq -r .pi)

            python backend_scripts/gather_pi_data_matrix.py \
              --run-job \
              --sim-file="$sim_file" \
              --json-out="$json_out" \
              --html-out="$html_out" \
              --class="$cls" \
              --spec="$spec" \
              --targets="$targets" \
              --pi="$pi" \
              --precision=0.05 \
              --iterations=50000 \
              --repeats=3
          done

      - name: Upload all sim results for ${{ matrix.class }} / ${{ matrix.spec }}
        uses: actions/upload-artifact@v4
        with:
          name: sim-results-${{ matrix.class }}-${{ matrix.spec }}
          path: |
            data/sims/final_sims/${{ matrix.class }}/${{ matrix.spec }}/*.json
            data/sims/final_sims/${{ matrix.class }}/${{ matrix.spec }}/*.html

  collect-and-commit:
    needs: simulate
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Download simc profiles
        uses: actions/download-artifact@v4       
        with:
            name: simc-profiles
            path: data/sims/profiles

      - name: Regroup simc profiles into class/spec subfolders
        run: |
          set -e
          PROFILE_DIR="data/sims/profiles"
          find "$PROFILE_DIR" -maxdepth 1 -type f -name '*.simc' | while read f; do
            base=$(basename "$f" .simc)
            cls=${base%%_*}
            spec=${base#*_}; spec=${spec%%_*}
            dest="$PROFILE_DIR/$cls/$spec"
            mkdir -p "$dest"
            mv "$f" "$dest/"
          done

      - name: Download all sim results artifacts
        uses: actions/download-artifact@v4
        with:
          path: data/sims/final_sims

      - name: Flatten & regroup into per-spec dirs
        run: |
          set -e
          # 1) Move all files up
          find data/sims/final_sims -mindepth 2 -type f \
            -exec mv {} data/sims/final_sims/ \;
          # 2) Delete empty dirs
          find data/sims/final_sims -mindepth 1 -type d -exec rm -rf {} +
          # 3) Regroup by class/spec
          mkdir -p data/sims/final_sims_grouped
          for f in data/sims/final_sims/*.{json,html}; do
            base=$(basename "$f")
            cls=${base%%_*}                       # up to first underscore
            spec=${base#*_}; spec=${spec%%_*}    # between underscores
            dir="data/sims/final_sims_grouped/$cls/$spec"
            mkdir -p "$dir"
            mv "$f" "$dir/"
          done
          # 4) Swap in place
          rm -rf data/sims/final_sims
          mv data/sims/final_sims_grouped data/sims/final_sims/   

      
      - name: List full workspace tree
        run: |
          echo "Working directory: $PWD"
          echo "=== Directory tree ==="
          find data/sims -type d    -print    # all directories
          echo "=== File list ==="
          find data/sims -type f    -print    

      - name: Stage all sim outputs
        run: |
          git add data/sims/final_sims/**/*.json
          git add data/sims/final_sims/**/*.html

      - name: Commit and push simulation outputs
        run: |
          # set up git identity
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git config pull.rebase true

          # make sure we're up to date
          git pull

          # add only the sim files we care about
          git add data/sims/profiles/**/*.simc
          git add data/sims/final_sims/**/*.json
          git add data/sims/final_sims/**/*.html

          # commit if there are changes
          if git diff --cached --quiet; then
            echo "No simulation data changed."
          else
            git commit -m "Updated simulation data"
            git push
          fi
             

