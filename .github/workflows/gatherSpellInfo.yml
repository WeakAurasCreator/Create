name: Gather spell info

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

env: 
   UPDATE_BRANCH: spell-data-updates

jobs:
  gather-spell-info:
    runs-on: ubuntu-latest
    env:
      BLIZZARD_CLIENT_ID: ${{ secrets.BLIZZARD_CLIENT_ID }}
      BLIZZARD_CLIENT_SECRET: ${{ secrets.BLIZZARD_CLIENT_SECRET }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BATCH_SIZE:  30000       
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp aiofiles backoff

      - name: Run item data gathering script
        run: |
            python backend_scripts/gather_spell_data.py \
              --batch-size $BATCH_SIZE \

      - name: Commit and push changes
        run: |
          set -e  # Exit script on any command failure
      
          # Configure Git
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git config pull.rebase true  # Rebase on pull

          # Create or reset the update branch
          git fetch origin main
          git checkout -B $UPDATE_BRANCH origin/main
      
          # Function to commit a batch if there are staged changes
          commit_batch() {
            if ! git diff --cached --quiet; then
              git commit -m "$1"
            else
              echo "No changes to commit for batch: $1"
            fi
          }
      
          BATCH_SIZE=5000
      
          # Batch commit for icons
          echo "Committing icons in batches..."
          mapfile -t icon_files < <(find data/icons -type f)
          total_icons=${#icon_files[@]}
          for (( i=0; i<total_icons; i+=BATCH_SIZE )); do
            batch=( "${icon_files[@]:i:BATCH_SIZE}" )
            git add "${batch[@]}"
            commit_batch "Updated Spell icons batch $((i / BATCH_SIZE + 1))"
          done
      
          # Batch commit for spells
          echo "Committing spells in batches..."
          mapfile -t spell_files < <(find data/spells -type f)
          total_spells=${#spell_files[@]}
          for (( i=0; i<total_spells; i+=BATCH_SIZE )); do
            batch=( "${spell_files[@]:i:BATCH_SIZE}" )
            git add "${batch[@]}"
            commit_batch "Updated Spell spells batch $((i / BATCH_SIZE + 1))"
          done
      
      - name: Push update branch
        run: |
          # Push or force-update the branch with all new commits
          git push -u origin $UPDATE_BRANCH --force
  
      - name: Create or Update Pull Request
        id: create_pr
        run: |
          PR_URL=$(gh pr list --head ${{ env.UPDATE_BRANCH }} --state open --json url --jq '.[0].url')
          if [ -z "$PR_URL" ]; then
            gh pr create --base main --head ${{ env.UPDATE_BRANCH }} \
              --title "Automated spell data update" \
              --body "Batched updates generated on $(date -u +'%Y-%m-%d')." \
              --label update,spells --assignee "@me"
          else
            gh pr edit "$PR_URL" \
              --title "Automated spell data update (refresh)" \
              --body "Regenerated on $(date -u +'%Y-%m-%d')."
          fi
  
      - name: Enable Pull Request Auto-Merge
        run: |
            PR_NUMBER=$(gh pr list --head ${{ env.UPDATE_BRANCH }} --state open \
              --json number --jq '.[0].number')
            gh pr merge "$PR_NUMBER" --auto --squash
  